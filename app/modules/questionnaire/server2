library(shiny)

server2 <- function(input, output, session) {

  observeEvent(input$load_inputs, {
    # Load inputs
    uploaded_inputs <- read.csv(input$inputsLocation)
    # Update each input
    for (i in seq_len(nrow(uploaded_inputs))){
      updateNumericInput(session,
                         inputId = uploaded_inputs$inputId[i],
                         value = uploaded_inputs$value[i])
    }
  })

  rand <- eventReactive(input$get_rating, {
    runif(1)
  })

  output$recommendations <- renderText({
    if (rand() > 0 & rand() < 1 / 3) {

      rating <- c("crm", "tpt", "other")
      "First choice is CRM, second choice is 3+3, third choice is other."

    } else if (rand() > 1 / 3 & rand() < 2 / 3) {

      rating <- c("tpt", "crm", "other")
      "First choice is 3+3, second choice is CRM, third choice is other."

    } else {

      rating <- c("other", "tpt", "crm")
      "First choice is other, second choice is 3+3, third choice is CRM."

    }
  })

  observeEvent(input$save_inputs, {
    # Define inputs to save
    inputs_to_save <- c("drug_type", "know_doses",
                        "n_doses", "start_dose",
                        "know_prior_tox_info",
                        "know_ttl", "ttl",
                        "need_tox_interval", "stats_help",
                        "know_late_tox", "cohort_vary",
                        "cohort_size", "know_max_n",
                        "max_n")
    # Declare inputs
    inputs <- NULL
    # Append all inputs before saving to folder
    for (input.i in inputs_to_save){
      inputs <- append(inputs, input[[input.i]])
    }
    # Inputs data.frame
    inputs_data_frame <- data.frame(inputId = inputs_to_save, value = inputs)
    # Save Inputs
    write.csv(inputs_data_frame, file = input$inputsLocation, row.names = FALSE)
  })

}
